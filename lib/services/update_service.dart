import 'dart:convert';
import 'dart:io';
import 'package:http/http.dart' as http;
import 'package:package_info_plus/package_info_plus.dart';
import 'package:path_provider/path_provider.dart';
import 'package:open_file/open_file.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:flutter/material.dart';

class UpdateService {
  // ‚ö†Ô∏è –ó–ê–ú–ï–ù–ò–¢–ï –Ω–∞ –≤–∞—à —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π!
  static const String repoUrl =
      'https://api.github.com/repos/tr4stfulmode/releases-wishlist/releases/latest';

  static final GlobalKey<NavigatorState> navigatorKey = GlobalKey<NavigatorState>();
  static bool _isChecking = false;
  static bool _updateShown = false;

  static Future<void> checkAndUpdate() async {
    try {
      print('üîç Checking for updates...');

      final client = http.Client();
      final response = await client.get(
        Uri.parse(repoUrl),
        headers: {
          'User-Agent': 'Wishlist-App/1.0',
          'Accept': 'application/vnd.github.v3+json',
        },
      ).timeout(const Duration(seconds: 10));

      print('üì° Response status: ${response.statusCode}');

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        final latestVersion = data['tag_name']?.toString().replaceAll('v', '') ?? '';
        final downloadUrl = _findApkUrl(data);
        final releaseNotes = data['body'] ?? '–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ';
        final isMandatory = _checkIfMandatory(data); // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É

        print('üì¶ Latest version: $latestVersion');
        print('üîó Download URL: ${downloadUrl.isNotEmpty ? "Available" : "Not found"}');

        if (await _shouldUpdate(latestVersion) && downloadUrl.isNotEmpty) {
          print('üéØ Update available! Showing dialog...');
          _showUpdateDialog(downloadUrl, releaseNotes, isMandatory); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
        } else {
          print('‚úÖ App is up to date');
        }
      } else {
        print('‚ùå GitHub API error: ${response.statusCode}');
      }

      client.close();
    } catch (e) {
      print('‚ùå Update check failed: $e');
    }
  }

// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  static bool _checkIfMandatory(Map<String, dynamic> data) {
    final notes = (data['body'] ?? '').toLowerCase();
    return notes.contains('[mandatory]') || notes.contains('[critical]');
  }

  static String _findApkUrl(Map<String, dynamic> data) {
    if (data['assets'] != null) {
      for (var asset in data['assets']) {
        if (asset['name']?.toString().endsWith('.apk') == true) {
          return asset['browser_download_url'];
        }
      }
    }
    return '';
  }


  static Future<bool> _shouldUpdate(String latestVersion) async {
    final packageInfo = await PackageInfo.fromPlatform();
    final currentVersion = packageInfo.version;

    return _compareVersions(currentVersion, latestVersion) < 0;
  }

  static int _compareVersions(String version1, String version2) {
    try {
      final v1 = version1.split('.').map(int.parse).toList();
      final v2 = version2.split('.').map(int.parse).toList();

      for (int i = 0; i < v1.length; i++) {
        if (i >= v2.length) return 1;
        if (v1[i] > v2[i]) return 1;
        if (v1[i] < v2[i]) return -1;
      }
      return 0;
    } catch (e) {
      return 0;
    }
  }

  static void _showUpdateDialog(String downloadUrl, String releaseNotes, bool isMandatory) {
    final context = navigatorKey.currentContext;
    if (context == null) return;

    showDialog(
      context: context,
      barrierDismissible: !isMandatory,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text(
            isMandatory ? '–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ' : '–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ',
            style: TextStyle(
              color: isMandatory ? Colors.red : Colors.blue,
              fontWeight: FontWeight.bold,
            ),
          ),
          content: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  '–ß—Ç–æ –Ω–æ–≤–æ–≥–æ:',
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 8),
                Text(
                  releaseNotes.length > 200
                      ? '${releaseNotes.substring(0, 200)}...'
                      : releaseNotes,
                  style: const TextStyle(fontSize: 14),
                ),
                const SizedBox(height: 16),
                if (isMandatory)
                  Text(
                    '–≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –Ω–µ–≥–æ.',
                    style: TextStyle(
                      color: Colors.red,
                      fontWeight: FontWeight.w500,
                    ),
                  ),
              ],
            ),
          ),
          actions: [
            if (!isMandatory)
              TextButton(
                onPressed: () {
                  _updateShown = false;
                  Navigator.of(context).pop();
                },
                child: const Text('–ü–û–ó–ñ–ï'),
              ),
            ElevatedButton(
              onPressed: () {
                Navigator.of(context).pop();
                _downloadAndInstall(downloadUrl);
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: isMandatory ? Colors.red : Colors.blue,
              ),
              child: Text(isMandatory ? '–û–ë–ù–û–í–ò–¢–¨ –°–ï–ô–ß–ê–°' : '–û–ë–ù–û–í–ò–¢–¨'),
            ),
          ],
        );
      },
    );
  }

  static void _showUpToDateSnackBar() {
    final context = navigatorKey.currentContext;
    if (context == null) return;

    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏'),
        duration: Duration(seconds: 2),
      ),
    );
  }

  static Future<void> _downloadAndInstall(String url) async {
    final context = navigatorKey.currentContext;
    if (context == null) {
      print('‚ùå Context is null, cannot show download dialog');
      return;
    }

    try {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
      showDialog(
        context: context, // –¢–µ–ø–µ—Ä—å context –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –Ω–µ null
        barrierDismissible: false,
        builder: (context) => AlertDialog(
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              const CircularProgressIndicator(),
              const SizedBox(height: 16),
              const Text('–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...'),
              const SizedBox(height: 8),
              Text(
                '–ù–µ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                style: TextStyle(
                  fontSize: 12,
                  color: Colors.grey[600],
                ),
              ),
            ],
          ),
        ),
      );

      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      if (await Permission.storage.request().isGranted) {
        print('üì• Downloading update from: $url');
        final response = await http.get(Uri.parse(url));

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        final directory = await getExternalStorageDirectory();
        final file = File('${directory?.path}/update_${DateTime.now().millisecondsSinceEpoch}.apk');

        await file.writeAsBytes(response.bodyBytes);
        print('‚úÖ Update downloaded: ${file.path}');

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏
        if (navigatorKey.currentContext != null) {
          Navigator.of(navigatorKey.currentContext!).pop();
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º APK
        await OpenFile.open(file.path);
        print('üöÄ Opening installer...');

      } else {
        if (navigatorKey.currentContext != null) {
          Navigator.of(navigatorKey.currentContext!).pop();
        }
        _showErrorSnackBar('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∑–∞–ø–∏—Å—å –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ');
      }
    } catch (e) {
      if (navigatorKey.currentContext != null) {
        Navigator.of(navigatorKey.currentContext!).pop();
      }
      print('‚ùå Download failed: $e');
      _showErrorSnackBar('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: $e');
    }
  }

  static void _showErrorSnackBar(String message) {
    final context = navigatorKey.currentContext;
    if (context == null) return;

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red,
      ),
    );
  }



}