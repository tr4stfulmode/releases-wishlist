import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:app_wishlist/models/user_profile.dart';

class AuthService {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø—Ä–æ—Ñ–∏–ª—è
  Future<User> createUserWithEmailAndPassword(
      String email,
      String password,
      ) async {
    try {
      print('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $email');

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firebase Auth
      final UserCredential result = await _auth.createUserWithEmailAndPassword(
        email: email,
        password: password,
      );

      final User user = result.user!;
      print('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –≤ Auth: ${user.uid}');

      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firestore
      final profile = UserProfile(
        uid: user.uid,
        email: email,
        displayName: _getDisplayNameFromEmail(email),
        createdAt: DateTime.now(),
        shareToken: _generateShareToken(user.uid),
      );

      print('üîÑ –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ Firestore...');
      await _createUserProfile(profile);
      print('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');

      return user;

    } on FirebaseAuthException catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ Firebase Auth: ${e.code} - ${e.message}');
      rethrow;
    } on FirebaseException catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ Firestore: ${e.code} - ${e.message}');
      throw Exception('–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${e.message}');
    } catch (e) {
      print('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
      rethrow;
    }
  }

  // –í—Ö–æ–¥
  Future<User> signInWithEmailAndPassword(
      String email,
      String password,
      ) async {
    try {
      final UserCredential result = await _auth.signInWithEmailAndPassword(
        email: email,
        password: password,
      );

      final User user = result.user!;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await _ensureUserProfileExists(user);

      return user;
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: $e');
      rethrow;
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> _createUserProfile(UserProfile profile) async {
    try {
      await _firestore
          .collection('user_profiles')
          .doc(profile.uid)
          .set(profile.toMap());
      print('üìù –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω –¥–ª—è: ${profile.email}');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: $e');
      rethrow;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  Future<void> _ensureUserProfileExists(User user) async {
    try {
      final profileDoc = await _firestore
          .collection('user_profiles')
          .doc(user.uid)
          .get();

      if (!profileDoc.exists) {
        print('‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º...');

        final profile = UserProfile(
          uid: user.uid,
          email: user.email!,
          displayName: _getDisplayNameFromEmail(user.email!),
          createdAt: DateTime.now(),
          shareToken: _generateShareToken(user.uid),
        );

        await _createUserProfile(profile);
        print('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      } else {
        print('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: $e');
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏–∑ email
  String _getDisplayNameFromEmail(String email) {
    return email.split('@').first;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Å—Å—ã–ª–∫–∏
  String _generateShareToken(String uid) {
    return '${DateTime.now().millisecondsSinceEpoch.toRadixString(36)}${uid.substring(0, 8)}';
  }

  // –í—ã—Ö–æ–¥
  Future<void> signOut() async {
    await _auth.signOut();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  User? get currentUser => _auth.currentUser;

  // –°–ª—É—à–∞—Ç–µ–ª—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  Stream<User?> get authStateChanges => _auth.authStateChanges();
}