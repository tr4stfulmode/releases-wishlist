import 'package:dio/dio.dart';
import 'package:package_info_plus/package_info_plus.dart';
import 'package:path_provider/path_provider.dart';
import 'package:open_file/open_file.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:firebase_storage/firebase_storage.dart';

class OTAService {
  static final Dio _dio = Dio();
  static final FirebaseStorage _storage = FirebaseStorage.instance;

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Firebase
  static Future<Map<String, dynamic>?> checkForUpdate() async {
    try {
      final packageInfo = await PackageInfo.fromPlatform();
      final currentVersion = packageInfo.version;

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏ –∏–∑ Firebase
      final versionInfo = await _getVersionInfo();
      if (versionInfo == null) return null;

      final latestVersion = versionInfo['version'];

      if (_isNewerVersion(latestVersion, currentVersion)) {
        return {
          'latest_version': latestVersion,
          'apk_url': await _getApkUrl(latestVersion),
          'changelog': versionInfo['changelog'],
          'force_update': versionInfo['force_update'] ?? false,
          'file_size': versionInfo['file_size'],
          'release_date': versionInfo['release_date'],
        };
      }
      return null;
    } catch (e) {
      print('‚ùå OTA Check Error: $e');
      return null;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏
  static Future<Map<String, dynamic>?> _getVersionInfo() async {
    try {
      final ref = _storage.ref('ota/version.json');
      final data = await ref.getData();
      return _parseVersionData(String.fromCharCodes(data!));
    } catch (e) {
      print('‚ùå Version info error: $e');
      return null;
    }
  }

  static Map<String, dynamic> _parseVersionData(String data) {
    return {
      'version': '1.0.1',
      'force_update': false,
      'file_size': '15.2 MB',
      'release_date': '2024-01-15',
      'changelog': [
        'üé® –ù–æ–≤–∞—è –∏–∫–æ–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
        'üöÄ –£–ª—É—á—à–µ–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
        'üîî –î–æ–±–∞–≤–ª–µ–Ω—ã —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
        'üêõ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏',
        'üì± –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤'
      ]
    };
  }

  // –ü–æ–ª—É—á–∏—Ç—å URL APK
  static Future<String> _getApkUrl(String version) async {
    try {
      final ref = _storage.ref('ota/app_v$version.apk');
      return await ref.getDownloadURL();
    } catch (e) {
      print('‚ùå APK URL error: $e');
      rethrow;
    }
  }

  // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π
  static bool _isNewerVersion(String latest, String current) {
    try {
      final latestParts = latest.split('.').map(int.parse).toList();
      final currentParts = current.split('.').map(int.parse).toList();

      for (int i = 0; i < latestParts.length; i++) {
        if (latestParts[i] > currentParts[i]) return true;
        if (latestParts[i] < currentParts[i]) return false;
      }
      return false;
    } catch (e) {
      return false;
    }
  }

  // –°–∫–∞—á–∞—Ç—å APK
  static Future<String> downloadApk(String apkUrl, {
    required Function(double) onProgress,
  }) async {
    try {
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      final status = await Permission.storage.request();
      if (!status.isGranted) {
        throw Exception('Storage permission denied');
      }

      // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
      final tempDir = await getTemporaryDirectory();
      final String filePath = '${tempDir.path}/app_update_${DateTime.now().millisecondsSinceEpoch}.apk';

      // –°–∫–∞—á–∏–≤–∞–µ–º —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
      await _dio.download(
        apkUrl,
        filePath,
        onReceiveProgress: (received, total) {
          if (total != -1) {
            final progress = received / total;
            onProgress(progress);
          }
        },
        deleteOnError: true,
      );

      return filePath;
    } catch (e) {
      print('‚ùå Download error: $e');
      rethrow;
    }
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å APK
  static Future<void> installApk(String filePath) async {
    try {
      final result = await OpenFile.open(filePath);
      if (result.type != ResultType.done) {
        throw Exception('Failed to open APK file');
      }
      print('‚úÖ APK installation started');
    } catch (e) {
      print('‚ùå Installation error: $e');
      rethrow;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤–µ—Ä—Å–∏–π
  static Future<List<Map<String, dynamic>>> getVersionHistory() async {
    try {
      final ref = _storage.ref('ota/version_history.json');
      final data = await ref.getData();
      final history = _parseVersionHistory(String.fromCharCodes(data!));
      return history;
    } catch (e) {
      print('‚ùå Version history error: $e');
      return [];
    }
  }

  static List<Map<String, dynamic>> _parseVersionHistory(String data) {
    return [
      {
        'version': '1.0.1',
        'date': '2024-01-15',
        'changes': ['–ù–æ–≤–∞—è –∏–∫–æ–Ω–∫–∞', '–°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è']
      },
      {
        'version': '1.0.0',
        'date': '2024-01-01',
        'changes': ['–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–ª–∏–∑']
      }
    ];
  }
}