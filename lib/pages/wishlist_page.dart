import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:app_wishlist/models/wish_item.dart';
import 'package:app_wishlist/widgets/wish_item_card.dart';
import 'package:app_wishlist/services/auth_service.dart';
import 'package:app_wishlist/services/firestore_service.dart';
import 'package:app_wishlist/services/notification_service.dart';

class WishlistPage extends StatefulWidget {
  const WishlistPage({super.key});

  @override
  State<WishlistPage> createState() => _WishlistPageState();
}

class _WishlistPageState extends State<WishlistPage> {
  final AuthService _authService = AuthService();
  final FirestoreService _firestoreService = FirestoreService();
  final FirebaseAuth _auth = FirebaseAuth.instance;

  // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  final Set<String> _notifiedItems = {};

  @override
  void initState() {
    super.initState();
    _initializeNotifications();
    _startNotificationListener();
  }

  @override
   void dispose() {
    // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–ª—É—à–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    NotificationService.dispose();
    super.dispose();
  }

  void _initializeNotifications() async {
    await NotificationService.initialize();
    await NotificationService.requestPermissions();
  }

  void _startNotificationListener() {
    // –°–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    _firestoreService.getWishItems().listen((items) {
      _checkForNewItems(items);
    });
  }

  void _checkForNewItems(List<WishItem> items) {
    final currentUserEmail = _auth.currentUser?.email;

    for (final item in items) {
      // –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –º—ã –µ—â–µ –Ω–µ —É–≤–µ–¥–æ–º–ª—è–ª–∏ –æ –Ω–µ–º
      if (item.addedBy != null &&
          item.addedBy != currentUserEmail &&
          !_notifiedItems.contains(item.id)) {

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥–º–µ—Ç –Ω–æ–≤—ã–π (—Å–æ–∑–¥–∞–Ω –Ω–µ –±–æ–ª–µ–µ 2 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥)
        final twoMinutesAgo = DateTime.now().subtract(const Duration(minutes: 2));
        if (item.createdAt.isAfter(twoMinutesAgo)) {

          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –°–ò–°–¢–ï–ú–ù–û–ï —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
          NotificationService.showNewItemNotification(
            item.title,
            item.addedBy!,
          );

          // –¢–∞–∫–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º SnackBar —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
          _showNewItemSnackBar(item.title, item.addedBy!);

          // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã–π
          _notifiedItems.add(item.id);

          print('‚úÖ –ü–æ–∫–∞–∑–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞: ${item.title}');
        }
      }
    }
  }

  void _showNewItemSnackBar(String itemTitle, String addedBy) {
    final userName = addedBy.split('@').first;

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'üéÅ –ù–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç!',
              style: TextStyle(
                fontWeight: FontWeight.bold,
                color: Colors.white,
                fontFamily: 'Poppins',
              ),
            ),
            SizedBox(height: 4),
            Text(
              '$userName –¥–æ–±–∞–≤–∏–ª(–∞): "$itemTitle"',
              style: TextStyle(
                color: Colors.white,
                fontFamily: 'Poppins',
              ),
            ),
          ],
        ),
        backgroundColor: Colors.blue,
        behavior: SnackBarBehavior.floating,
        duration: Duration(seconds: 4),
        action: SnackBarAction(
          label: 'OK',
          textColor: Colors.white,
          onPressed: () {
            ScaffoldMessenger.of(context).hideCurrentSnackBar();
          },
        ),
      ),
    );
  }

  void _addNewWish() {
    final titleController = TextEditingController();
    final descriptionController = TextEditingController();
    final priceController = TextEditingController();
    final imageUrlController = TextEditingController();
    int priority = 3;

    final List<String> defaultImages = [
      'https://images.unsplash.com/photo-1505740420928-5e560c06d30e?w=400',
      'https://images.unsplash.com/photo-1523275335684-37898b6baf30?w=400',
      'https://images.unsplash.com/photo-1553062407-98eeb64c6a62?w=400',
      'https://images.unsplash.com/photo-1546868871-7041f2a55e12?w=400',
      'https://images.unsplash.com/photo-1560769629-975ec94e6a86?w=400',
      'https://images.unsplash.com/photo-1572569511254-d8f925fe2cbb?w=400',
    ];

    showDialog(
      context: context,
      builder: (context) {
        return StatefulBuilder(
          builder: (context, setDialogState) {
            return AlertDialog(
              title: Text(
                '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ',
                style: TextStyle(
                  fontFamily: 'Poppins',
                  fontWeight: FontWeight.w600,
                  color: Theme.of(context).colorScheme.primary,
                ),
              ),
              content: SingleChildScrollView(
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    TextFormField(
                      controller: titleController,
                      decoration: const InputDecoration(
                        labelText: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞*',
                        border: OutlineInputBorder(),
                        hintText: '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ',
                      ),
                      style: const TextStyle(fontFamily: 'Poppins'),
                    ),
                    const SizedBox(height: 16),
                    TextFormField(
                      controller: descriptionController,
                      decoration: const InputDecoration(
                        labelText: '–û–ø–∏—Å–∞–Ω–∏–µ*',
                        border: OutlineInputBorder(),
                        hintText: '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞',
                      ),
                      style: const TextStyle(fontFamily: 'Poppins'),
                      maxLines: 2,
                    ),
                    const SizedBox(height: 16),
                    TextFormField(
                      controller: priceController,
                      decoration: const InputDecoration(
                        labelText: '–¶–µ–Ω–∞*',
                        prefixText: '‚ÇΩ',
                        border: OutlineInputBorder(),
                        hintText: '0.00',
                      ),
                      style: const TextStyle(fontFamily: 'Poppins'),
                      keyboardType: TextInputType.numberWithOptions(decimal: true),
                    ),
                    const SizedBox(height: 16),
                    TextFormField(
                      controller: imageUrlController,
                      decoration: InputDecoration(
                        labelText: '–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)',
                        border: const OutlineInputBorder(),
                        hintText: '–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
                        suffixIcon: IconButton(
                          icon: const Icon(Icons.shuffle),
                          onPressed: () {
                            final randomIndex = (priority - 1) % defaultImages.length;
                            imageUrlController.text = defaultImages[randomIndex];
                            setDialogState(() {});
                          },
                        ),
                      ),
                      style: const TextStyle(fontFamily: 'Poppins'),
                    ),
                    const SizedBox(height: 16),
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç',
                          style: TextStyle(
                            fontFamily: 'Poppins',
                            fontSize: 16,
                            fontWeight: FontWeight.w500,
                            color: Theme.of(context).colorScheme.onSurface,
                          ),
                        ),
                        const SizedBox(height: 8),
                        Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: List.generate(5, (index) {
                            return IconButton(
                              onPressed: () {
                                setDialogState(() {
                                  priority = index + 1;
                                });
                              },
                              icon: Icon(
                                index < priority ? Icons.star : Icons.star_border,
                                color: Theme.of(context).colorScheme.primary,
                                size: 32,
                              ),
                            );
                          }),
                        ),
                        Center(
                          child: Text(
                            '$priority –∏–∑ 5',
                            style: TextStyle(
                              fontFamily: 'Poppins',
                              color: Theme.of(context).colorScheme.primary,
                              fontWeight: FontWeight.w600,
                            ),
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
              actions: [
                TextButton(
                  onPressed: () => Navigator.pop(context),
                  child: Text(
                    '–û—Ç–º–µ–Ω–∞',
                    style: TextStyle(
                      fontFamily: 'Poppins',
                      color: Theme.of(context).colorScheme.onSurface.withOpacity(0.6),
                    ),
                  ),
                ),
                ElevatedButton(
                  onPressed: () async {
                    if (titleController.text.isEmpty) {
                      _showErrorSnackBar('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ');
                      return;
                    }

                    if (priceController.text.isEmpty) {
                      _showErrorSnackBar('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É');
                      return;
                    }

                    final price = double.tryParse(priceController.text);
                    if (price == null || price <= 0) {
                      _showErrorSnackBar('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É');
                      return;
                    }

                    try {
                      final newWish = WishItem.createNew(
                        title: titleController.text.trim(),
                        description: descriptionController.text.trim(),
                        price: price,
                        imageUrl: imageUrlController.text.trim().isEmpty
                            ? defaultImages[priority - 1]
                            : imageUrlController.text.trim(),
                        priority: priority,
                        addedBy: _auth.currentUser?.email,
                      );

                      await _firestoreService.addWishItem(newWish);

                      Navigator.pop(context);
                      _showSuccessSnackBar('¬´${newWish.title}¬ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∏—à–ª–∏—Å—Ç!');

                    } catch (e) {
                      _showErrorSnackBar('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: $e');
                    }
                  },
                  child: Text(
                    '–î–æ–±–∞–≤–∏—Ç—å',
                    style: TextStyle(
                      fontFamily: 'Poppins',
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ),
              ],
            );
          },
        );
      },
    );
  }

  void _checkForNewItems(List<WishItem> items) {
    final currentUserEmail = _auth.currentUser?.email;

    for (final item in items) {
      // –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –º—ã –µ—â–µ –Ω–µ —É–≤–µ–¥–æ–º–ª—è–ª–∏ –æ –Ω–µ–º
      if (item.addedBy != null &&
          item.addedBy != currentUserEmail &&
          !_notifiedItems.contains(item.id)) {

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥–º–µ—Ç –Ω–æ–≤—ã–π (—Å–æ–∑–¥–∞–Ω –Ω–µ –±–æ–ª–µ–µ 2 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥)
        final twoMinutesAgo = DateTime.now().subtract(const Duration(minutes: 2));
        if (item.createdAt.isAfter(twoMinutesAgo)) {

          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –°–ò–°–¢–ï–ú–ù–û–ï —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
          NotificationService.showNewItemNotification(
            item.title,
            item.addedBy!,
          );

          // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã–π
          _notifiedItems.add(item.id);

          print('–ü–æ–∫–∞–∑–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞: ${item.title}');
        }
      }
    }
  }

// –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è SnackBar —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  void _showNewItemSnackBar(String itemTitle, String addedBy) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'üéÅ –ù–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç!',
              style: TextStyle(
                fontWeight: FontWeight.bold,
                color: Colors.white,
              ),
            ),
            SizedBox(height: 4),
            Text(
              '$addedBy –¥–æ–±–∞–≤–∏–ª(–∞): "$itemTitle"',
              style: TextStyle(color: Colors.white),
            ),
          ],
        ),
        backgroundColor: Colors.blue,
        behavior: SnackBarBehavior.floating,
        duration: Duration(seconds: 4),
        action: SnackBarAction(
          label: 'OK',
          textColor: Colors.white,
          onPressed: () {
            ScaffoldMessenger.of(context).hideCurrentSnackBar();
          },
        ),
      ),
    );
  }

  void _togglePurchased(WishItem item) async {
    try {
      await _firestoreService.togglePurchased(item.id, !item.isPurchased);
    } catch (e) {
      _showErrorSnackBar('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: $e');
    }
  }

  void _deleteWishItem(String itemId) async {
    try {
      await _firestoreService.deleteWishItem(itemId);
      _showSuccessSnackBar('–ü—Ä–µ–¥–º–µ—Ç —É–¥–∞–ª–µ–Ω');
    } catch (e) {
      _showErrorSnackBar('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: $e');
    }
  }

  void _showSuccessSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(
          message,
          style: const TextStyle(fontFamily: 'Poppins'),
        ),
        backgroundColor: Colors.green,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(10),
        ),
      ),
    );
  }

  void _showErrorSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(
          message,
          style: const TextStyle(fontFamily: 'Poppins'),
        ),
        backgroundColor: Colors.red,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _logout() async {
    await _authService.signOut();
  }

  double _calculateTotalPrice(List<WishItem> items) {
    return items.fold(0.0, (sum, item) => sum + item.price);
  }

  int _calculatePurchasedCount(List<WishItem> items) {
    return items.where((item) => item.isPurchased).length;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey[50],
      appBar: AppBar(
        title: const Text(
          '–û–±—â–∏–π –í–∏—à–ª–∏—Å—Ç',
          style: TextStyle(
            fontFamily: 'Poppins',
            fontWeight: FontWeight.w700,
            fontSize: 24,
          ),
        ),
        backgroundColor: Theme.of(context).colorScheme.primaryContainer,
        elevation: 0,
        centerTitle: true,
        actions: [
          IconButton(
            icon: const Icon(Icons.logout),
            onPressed: _logout,
            tooltip: '–í—ã–π—Ç–∏',
          ),
        ],
      ),
      body: StreamBuilder<List<WishItem>>(
        stream: _firestoreService.getWishItems(),
        builder: (context, snapshot) {
          if (snapshot.hasError) {
            return Center(
              child: Text(
                '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${snapshot.error}',
                style: TextStyle(
                  fontFamily: 'Poppins',
                  color: Colors.red,
                ),
              ),
            );
          }

          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(
              child: CircularProgressIndicator(),
            );
          }

          final wishItems = snapshot.data ?? [];

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
          _checkForNewItems(wishItems);

          return Column(
            children: [
              // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
              Container(
                width: double.infinity,
                padding: const EdgeInsets.all(20),
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                    colors: [
                      Theme.of(context).colorScheme.primaryContainer,
                      Theme.of(context).colorScheme.secondaryContainer,
                    ],
                  ),
                ),
                child: Column(
                  children: [
                    Text(
                      '–û–±—â–∏–π –≤–∏—à–ª–∏—Å—Ç',
                      style: TextStyle(
                        fontFamily: 'Poppins',
                        fontSize: 16,
                        fontWeight: FontWeight.w500,
                        color: Theme.of(context).colorScheme.onPrimaryContainer,
                      ),
                    ),
                    const SizedBox(height: 8),
                    Text(
                      '${wishItems.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ ‚Ä¢ ‚ÇΩ${_calculateTotalPrice(wishItems).toStringAsFixed(2)}',
                      style: TextStyle(
                        fontFamily: 'Poppins',
                        fontSize: 20,
                        fontWeight: FontWeight.w700,
                        color: Theme.of(context).colorScheme.onPrimaryContainer,
                      ),
                    ),
                    const SizedBox(height: 4),
                    if (_calculatePurchasedCount(wishItems) > 0)
                      Text(
                        '–ö—É–ø–ª–µ–Ω–æ: ${_calculatePurchasedCount(wishItems)}',
                        style: TextStyle(
                          fontFamily: 'Poppins',
                          fontSize: 14,
                          color: Theme.of(context).colorScheme.onPrimaryContainer.withOpacity(0.8),
                        ),
                      ),
                  ],
                ),
              ),

              // –°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π
              Expanded(
                child: wishItems.isEmpty
                    ? const _EmptyState()
                    : ListView.builder(
                  padding: const EdgeInsets.all(16),
                  itemCount: wishItems.length,
                  itemBuilder: (context, index) {
                    final item = wishItems[index];
                    return WishItemCard(
                      item: item,
                      onTap: () => _togglePurchased(item),
                      onDelete: () => _deleteWishItem(item.id),
                      showAddedBy: true,
                    );
                  },
                ),
              ),
            ],
          );
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _addNewWish,
        backgroundColor: Theme.of(context).colorScheme.primary,
        foregroundColor: Theme.of(context).colorScheme.onPrimary,
        child: const Icon(Icons.add, size: 28),
      ),
    );
  }
}

// –í–∏–¥–∂–µ—Ç –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
class _EmptyState extends StatelessWidget {
  const _EmptyState();

  @override
  Widget build(BuildContext context) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.favorite_border_rounded,
            size: 80,
            color: Colors.grey[400],
          ),
          const SizedBox(height: 20),
          Text(
            '–í–∏—à–ª–∏—Å—Ç –ø—É—Å—Ç',
            style: TextStyle(
              fontFamily: 'Poppins',
              fontSize: 20,
              fontWeight: FontWeight.w600,
              color: Colors.grey[600],
            ),
          ),
          const SizedBox(height: 10),
          Text(
            '–ù–∞–∂–º–∏—Ç–µ + —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç',
            style: TextStyle(
              fontFamily: 'Poppins',
              fontSize: 14,
              color: Colors.grey[500],
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }
}